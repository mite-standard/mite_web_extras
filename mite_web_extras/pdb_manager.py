"""Prepare files for image creation.

Copyright (c) 2024 to present Mitja Maximilian Zdouc, PhD and individual contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import json
import logging
import shutil
from pathlib import Path
from typing import Self

from alphafetcher import AlphaFetcher
from pydantic import BaseModel, DirectoryPath, FilePath

logger = logging.getLogger(__name__)


class PdbManager(BaseModel):
    """Manages the download of PDB files from AlphaFoldDB and creating of protein images.

    Images are generated by a separate bash script "run_pymol.sh" due to issues in running PyMol as subprocess

    Attributes:
        data: data volume
        uniprot_acc: a list of uniprot accession IDs for download
    """

    data: Path = Path("/data")
    uniprot_acc: dict = {}

    def collect_uniprot_acc(self: Self) -> None:
        """Collect uniprot accession IDs from mite files"""
        for mite_file in self.data.joinpath("data").iterdir():
            with open(mite_file) as file_in:
                data = json.load(file_in)
            if data["status"] == "active":
                if acc := data["enzyme"]["databaseIds"].get("uniprot", None):
                    self.uniprot_acc[acc] = data["accession"]

    def download_pdbs(self: Self) -> None:
        """Download PDB-files from AlphaFold using the uniprot acc ids"""
        trgt = self.data.joinpath("pdb")
        if trgt.exists():
            logger.warning(
                f"{trgt.name} already exists. Remove {trgt.name} to re-download - SKIP"
            )
            return
        trgt.mkdir()

        fetcher = AlphaFetcher(base_savedir=str(trgt))
        fetcher.add_proteins(proteins=[i for i in self.uniprot_acc.keys()])
        fetcher.download_all_files(pdb=True, multithread=True, workers=4)

        try:
            for infile in trgt.joinpath("pdb_files").iterdir():
                infile.rename(trgt / f"{self.uniprot_acc[infile.stem]}.pdb")
            trgt.joinpath("pdb_files").rmdir()
        except FileNotFoundError("No PDB files downloaded from AlphaFoldDB - SKIP"):
            return
